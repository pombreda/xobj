<?xml version="1.0"?>

<!--
 Copyright (c) 2009 rPath, Inc.

 This program is distributed under the terms of the MIT License as found 
 in a file called LICENSE. If it is not present, the license
 is always available at http://www.opensource.org/licenses/mit-license.php.

 This program is distributed in the hope that it will be useful, but
 without any warranty; without even the implied warranty of merchantability
 or fitness for a particular purpose. See the MIT License for full details.
-->

<project basedir="." default="dist" name="xobj">
    
    <!-- Load user's property file to override settings -->
    <property file="user.properties"/>
	
	<!-- See if there is an OS property file to load -->
    <condition property="osPropertyFile" value="mac.properties">
       <os family="mac"/>
    </condition>
   
    <!-- Load OS property file -->
    <property file="${osPropertyFile}"/>
    
    <!-- Load our property file -->
    <property file="build.properties"/>
    
	<!-- Include support for Flex ant tasks -->
    <taskdef resource="flexTasks.tasks" classpath="${flex.sdk.ant.lib}/${flex.sdk.ant.flextasks.jar}" />
    
    <!-- Macro to build a flex library -->  
    <macrodef name="flexlib-build" description="Builds a flex library">
           
        <!-- The title of the lib for logging purposes -->
        <attribute name="title"/>
        
        <!-- The path/name of the lib we are creating -->
        <attribute name="outputLib"/>
        
        <!-- The source dir for the lib -->
        <attribute name="srcDir"/>
        
        <!-- The config file to load -->
        <attribute name="config"/>
        
        <!-- The namespace for the lib -->
        <attribute name="namespace"/>
        
        <!-- The name of the manifest file to create -->
        <attribute name="manifest"/>
        
        <!-- Additional compc elements -->
        <element name="compc-elements" optional="true"/>
        
        <sequential>
            <!-- Build the lib -->
            <echo>Building @{title} flex lib...</echo>
            <compc output="@{outputLib}" debug="true">
                <load-config filename="@{config}"/>
                <source-path path-element="@{srcDir}"/>
                <compc-elements/>
                
                <namespace uri="@{namespace}" manifest="@{manifest}" />
                <namespace uri="http://ns.adobe.com/mxml/2009" manifest="${flex.sdk.frameworks.dir}/mxml-2009-manifest.xml" />
                <namespace uri="library://ns.adobe.com/flex/spark" manifest="${flex.sdk.frameworks.dir}/spark-manifest.xml" />
                <namespace uri="library://ns.adobe.com/flex/halo" manifest="${flex.sdk.frameworks.dir}/mx-manifest.xml" />
                <namespace uri="http://www.adobe.com/2006/mxml" manifest="${flex.sdk.frameworks.dir}/mxml-manifest.xml" />
                
                <include-namespaces uri="@{namespace}"/>
                
                <!-- AS3 metadata to keep -->
                <keep-as3-metadata name="ArrayElementType"/>
                <keep-as3-metadata name="RAFMessage"/>
            </compc>
            <echo>@{title} flex lib build completed</echo>
        </sequential>
    </macrodef>
    
    <target name="clean" description="Initialization for building">
    	<echo>Cleaning xobj</echo>
        <delete includeemptydirs="true" quiet="true">
        	<fileset dir="${xobj.build.dir}">
                <include name="**/*"/>
            </fileset>
        </delete>
    	<echo>Cleaning completed</echo>
    </target>
	
	<target name="build-version" description="Create the build version and timestamp files">
        <echo>Obtaining build version for ${ant.project.name}...</echo>
        
        <!-- Write the version from mercurial -->
        <exec executable="${xobj.hg-version.cmd}" outputproperty="build.version">
        	<arg line="${xobj.top.dir}"/>
        </exec>
        <echo file="${xobj.build.dir.version.file}" message="${build.version}"/>
        <loadfile property="build.info.version" srcFile="${xobj.build.dir.version.file}"/>
        <echo>Current build version is ${build.info.version}</echo>
        
        <!-- Write the date/time stamp -->
        <tstamp>
            <format property="build.timestamp" pattern="MM/dd/yyyy HH:mm:ss"/>
        </tstamp>
        <echo file="${xobj.build.dir.timestamp.file}" message="${build.timestamp}"/>
        <loadfile property="build.info.timestamp" srcFile="${xobj.build.dir.timestamp.file}"/>
        <echo>Current build timestamp is ${build.info.timestamp}</echo>
    </target>
	    
    <target name="init" description="Initialization for building">
    	<mkdir dir="${xobj.build.dir}" />
    	<mkdir dir="${xobj.temp.src.dir}" />
    	<antcall target="build-version"/>
    </target>
    
    <target name="xobj-build" description="Build the xobj flex library">
    	
    	<!-- Copy the source dir to a new location so we can stamp version info
             without having to worry about failure cases where the file
             remains modified and gets checked in with an actual version
             instead of the replacement token.-->
        <copy todir="${xobj.temp.src.dir}">
            <fileset dir="${xobj.src.dir}"/>
        </copy>
        
        <!-- Stamp version info -->
        <property name="tmpSrcFile" value="${xobj.temp.src.dir}/${xobj.package.path}/XObjVersion.as"/>
        <loadfile property="build.version" srcFile="${xobj.build.dir.version.file}"/>
        <loadfile property="build.timestamp" srcFile="${xobj.build.dir.timestamp.file}"/>
        <property name="fullVersion" value="${build.version} (${build.timestamp})"/>
        <echo>Stamping XObjVersion.as with build version "${fullVersion}"</echo>
        <replace file="${xobj.temp.src.dir}/${xobj.package.path}/XObjVersion.as" token="@@XOBJ-BUILDVERSION@@" value="${fullVersion}"/>

    	<flexlib-build 
    		title="xobj" 
    		outputlib="${xobj.lib}"
    		config="${flex.config.file}"
    		srcdir="${xobj.temp.src.dir}"
    		namespace="${xobj.namespace}"
    		manifest="${xobj.manifest}">    		
        </flexlib-build>
    </target>
	
    <target name="build" description="Build the flexlibs">
        <!-- Clean up build environment -->
        <antcall target="clean"/>
        <antcall target="init"/>
    	
        <!-- Build the lib -->
    	<antcall target="xobj-build"/>
    </target>
    
    <!-- Target to do a clean build then run any tests -->
    <target name="dist" description="Perform a full build and run any tests">
        <antcall target="build"/>
    </target>
    
</project>
